{"version":3,"file":"preload.js","sources":["../electron/preload.ts"],"sourcesContent":["  import { contextBridge, ipcRenderer } from 'electron';\n\n  export interface IElectronAPI {\n    cpu: {\n      getProcesses: () => Promise<any[]>;\n      getProcessorInfo: () => Promise<any>;\n      getWhitelist: () => Promise<string[]>;\n      optimize: (name: string, level: string) => Promise<boolean>;\n      restore: (name: string) => Promise<boolean>;\n      restoreAll: () => Promise<boolean>;\n      addToWhitelist: (name: string) => Promise<boolean>;\n      removeFromWhitelist: (name: string) => Promise<boolean>;\n    };\n    // TODO: Uncomment when network socket endpoints are registered in main.ts\n    network: {\n      getNetworkUsage: () => Promise<any[]>;\n      setSpeedCap: (appName: string, speedMBps: number) => Promise<boolean>;\n      resetCap: (appName: string) => Promise<boolean>;\n      getOverall: () => Promise<any>;\n    };\n\n    ram: {\n      getSystemRamUsage: () => Promise<any>;\n      getTopRamProcesses: () => Promise<any[]>;\n    }\n  }\n\n  const electronAPI: IElectronAPI = {\n    cpu: {\n      getProcesses: () => ipcRenderer.invoke('cpu:get-processes'),\n      getProcessorInfo: () => ipcRenderer.invoke('cpu:get-processor-info'),\n      getWhitelist: () => ipcRenderer.invoke('cpu:get-whitelist'),\n      optimize: (name: string, level: string) => ipcRenderer.invoke('cpu:optimize', name, level),\n      restore: (name: string) => ipcRenderer.invoke('cpu:restore', name),\n      restoreAll: () => ipcRenderer.invoke('cpu:restore-all'),\n      addToWhitelist: (name: string) => ipcRenderer.invoke('cpu:add-whitelist', name),\n      removeFromWhitelist: (name: string) => ipcRenderer.invoke('cpu:remove-whitelist', name),\n    },\n    // TODO: Uncomment when network socket endpoints are registered in main.ts\n    network: {\n      getNetworkUsage: () => ipcRenderer.invoke('network:get-usage'),\n      setSpeedCap: (appName: string, speedMBps: number) => ipcRenderer.invoke('network:set-speed-cap', appName, speedMBps),\n      resetCap: (appName: string) => ipcRenderer.invoke('network:reset-cap', appName),\n      getOverall: () => ipcRenderer.invoke('network:get-usage-overall'),\n    },\n\n    ram: {\n      getSystemRamUsage: () => ipcRenderer.invoke('ram:get-system-usage'),\n      getTopRamProcesses: () => ipcRenderer.invoke('ram:get-top-processes')\n    }\n  };\n\n  contextBridge.exposeInMainWorld('electronAPI', electronAPI);"],"names":["electronAPI","ipcRenderer","name","level","appName","speedMBps","contextBridge"],"mappings":"yCA2BQA,EAA4B,CAChC,IAAK,CACH,aAAc,IAAMC,EAAAA,YAAY,OAAO,mBAAmB,EAC1D,iBAAkB,IAAMA,EAAAA,YAAY,OAAO,wBAAwB,EACnE,aAAc,IAAMA,EAAAA,YAAY,OAAO,mBAAmB,EAC1D,SAAU,CAACC,EAAcC,IAAkBF,EAAAA,YAAY,OAAO,eAAgBC,EAAMC,CAAK,EACzF,QAAUD,GAAiBD,EAAAA,YAAY,OAAO,cAAeC,CAAI,EACjE,WAAY,IAAMD,EAAAA,YAAY,OAAO,iBAAiB,EACtD,eAAiBC,GAAiBD,EAAAA,YAAY,OAAO,oBAAqBC,CAAI,EAC9E,oBAAsBA,GAAiBD,EAAAA,YAAY,OAAO,uBAAwBC,CAAI,CAAA,EAGxF,QAAS,CACP,gBAAiB,IAAMD,EAAAA,YAAY,OAAO,mBAAmB,EAC7D,YAAa,CAACG,EAAiBC,IAAsBJ,EAAAA,YAAY,OAAO,wBAAyBG,EAASC,CAAS,EACnH,SAAWD,GAAoBH,EAAAA,YAAY,OAAO,oBAAqBG,CAAO,EAC9E,WAAY,IAAMH,cAAY,OAAO,2BAA2B,CAAA,EAGlE,IAAK,CACH,kBAAmB,IAAMA,EAAAA,YAAY,OAAO,sBAAsB,EAClE,mBAAoB,IAAMA,cAAY,OAAO,uBAAuB,CAAA,CAExE,EAEAK,EAAAA,cAAc,kBAAkB,cAAeN,CAAW"}