{"version":3,"file":"preload.js","sources":["../electron/preload.ts"],"sourcesContent":["import { contextBridge, ipcRenderer } from 'electron';\n\nexport interface IElectronAPI {\n  cpu: {\n    getProcesses: () => Promise<any[]>;\n    getProcessorInfo: () => Promise<any>;\n    getWhitelist: () => Promise<string[]>;\n    optimize: (name: string, level: string) => Promise<boolean>;\n    restore: (name: string) => Promise<boolean>;\n    restoreAll: () => Promise<boolean>;\n    addToWhitelist: (name: string) => Promise<boolean>;\n    removeFromWhitelist: (name: string) => Promise<boolean>;\n  };\n  // TODO: Uncomment when network socket endpoints are registered in main.ts\n  // network: {\n  //   getNetworkUsage: () => Promise<any[]>;\n  //   setSpeedCap: (appName: string, speedMBps: number) => Promise<boolean>;\n  //   resetCap: (appName: string) => Promise<boolean>;\n  // };\n}\n\nconst electronAPI: IElectronAPI = {\n  cpu: {\n    getProcesses: () => ipcRenderer.invoke('cpu:get-processes'),\n    getProcessorInfo: () => ipcRenderer.invoke('cpu:get-processor-info'),\n    getWhitelist: () => ipcRenderer.invoke('cpu:get-whitelist'),\n    optimize: (name: string, level: string) => ipcRenderer.invoke('cpu:optimize', name, level),\n    restore: (name: string) => ipcRenderer.invoke('cpu:restore', name),\n    restoreAll: () => ipcRenderer.invoke('cpu:restore-all'),\n    addToWhitelist: (name: string) => ipcRenderer.invoke('cpu:add-whitelist', name),\n    removeFromWhitelist: (name: string) => ipcRenderer.invoke('cpu:remove-whitelist', name),\n  },\n  // TODO: Uncomment when network socket endpoints are registered in main.ts\n  // network: {\n  //   getNetworkUsage: () => ipcRenderer.invoke('network:get-usage'),\n  //   setSpeedCap: (appName: string, speedMBps: number) => ipcRenderer.invoke('network:set-speed-cap', appName, speedMBps),\n  //   resetCap: (appName: string) => ipcRenderer.invoke('network:reset-cap', appName),\n  // },\n};\n\ncontextBridge.exposeInMainWorld('electronAPI', electronAPI);"],"names":["ipcRenderer","contextBridge"],"mappings":";;AAqBA,MAAM,cAA4B;AAAA,EAChC,KAAK;AAAA,IACH,cAAc,MAAMA,SAAAA,YAAY,OAAO,mBAAmB;AAAA,IAC1D,kBAAkB,MAAMA,SAAAA,YAAY,OAAO,wBAAwB;AAAA,IACnE,cAAc,MAAMA,SAAAA,YAAY,OAAO,mBAAmB;AAAA,IAC1D,UAAU,CAAC,MAAc,UAAkBA,SAAAA,YAAY,OAAO,gBAAgB,MAAM,KAAK;AAAA,IACzF,SAAS,CAAC,SAAiBA,SAAAA,YAAY,OAAO,eAAe,IAAI;AAAA,IACjE,YAAY,MAAMA,SAAAA,YAAY,OAAO,iBAAiB;AAAA,IACtD,gBAAgB,CAAC,SAAiBA,SAAAA,YAAY,OAAO,qBAAqB,IAAI;AAAA,IAC9E,qBAAqB,CAAC,SAAiBA,SAAAA,YAAY,OAAO,wBAAwB,IAAI;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOF;AAEAC,SAAAA,cAAc,kBAAkB,eAAe,WAAW;"}