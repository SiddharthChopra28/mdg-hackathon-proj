{"version":3,"file":"main.js","sources":["../electron/socket-client.ts","../electron/main.ts"],"sourcesContent":["import * as net from 'net';\n\nconst SOCKET_PATH = '/tmp/cpu_optimizer.sock';\n\nexport class SocketClient {\n  private async sendCommand(command: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const client = net.createConnection(SOCKET_PATH);\n      \n      client.on('connect', () => {\n        client.write(JSON.stringify(command));\n      });\n      \n      client.on('data', (data) => {\n        try {\n          const response = data.toString().trim();\n          if (response.startsWith('{') || response.startsWith('[')) {\n            resolve(JSON.parse(response));\n          } else {\n            resolve(response);\n          }\n        } catch (error) {\n          resolve(data.toString().trim());\n        }\n        client.end();\n      });\n      \n      client.on('error', (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  async getProcesses(): Promise<any[]> {\n    try {\n      const result = await this.sendCommand({ action: 'cpu_print_processes' });\n      return Array.isArray(result) ? result : [];\n    } catch (error) {\n      console.error('Error getting processes:', error);\n      return [];\n    }\n  }\n\n  async getProcessorInfo(): Promise<any> {\n    try {\n      const result = await this.sendCommand({ action: 'cpu_processor_info' });\n      return result || {};\n    } catch (error) {\n      console.error('Error getting processor info:', error);\n      return {};\n    }\n  }\n\n  async getWhitelist(): Promise<string[]> {\n    try {\n      const result = await this.sendCommand({ action: 'cpu_list_whitelist' });\n      return Array.isArray(result) ? result : [];\n    } catch (error) {\n      console.error('Error getting whitelist:', error);\n      return [];\n    }\n  }\n\n  async optimizeProcess(name: string, level: string): Promise<boolean> {\n    try {\n      const result = await this.sendCommand({ \n        action: 'cpu_optimize', \n        name, \n        level \n      });\n      return result === 'Optimized';\n    } catch (error) {\n      console.error('Error optimizing process:', error);\n      return false;\n    }\n  }\n\n  async restoreProcess(name: string): Promise<boolean> {\n    try {\n      const result = await this.sendCommand({ \n        action: 'cpu_restore', \n        name \n      });\n      return result === 'Restored';\n    } catch (error) {\n      console.error('Error restoring process:', error);\n      return false;\n    }\n  }\n\n  async restoreAll(): Promise<boolean> {\n    try {\n      const result = await this.sendCommand({ action: 'cpu_restore_all' });\n      return result === 'All Restored';\n    } catch (error) {\n      console.error('Error restoring all processes:', error);\n      return false;\n    }\n  }\n\n  async addToWhitelist(name: string): Promise<boolean> {\n    try {\n      const result = await this.sendCommand({ \n        action: 'cpu_add_whitelist', \n        name \n      });\n      return result === 'Added to whitelist';\n    } catch (error) {\n      console.error('Error adding to whitelist:', error);\n      return false;\n    }\n  }\n\n  async removeFromWhitelist(name: string): Promise<boolean> {\n    try {\n      const result = await this.sendCommand({ \n        action: 'cpu_remove_whitelist', \n        name \n      });\n      return result === 'Removed from whitelist';\n    } catch (error) {\n      console.error('Error removing from whitelist:', error);\n      return false;\n    }\n  }\n}","import { app, BrowserWindow, ipcMain } from 'electron';\nimport { fileURLToPath } from 'node:url';\nimport path from 'node:path';\nimport { SocketClient } from './socket-client.js';\nimport { NetworkSocketClient } from './network-socket-client.js';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nprocess.env.APP_ROOT = path.join(__dirname, '../..');\n\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron');\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist');\nexport const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL;\n\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\n  ? path.join(process.env.APP_ROOT, 'public')\n  : RENDERER_DIST;\n\nlet win: BrowserWindow | null = null;\nlet socketClient: SocketClient;\nlet networkSocketClient: NetworkSocketClient;\n\nfunction createWindow() {\n  win = new BrowserWindow({\n    width: 1400,\n    height: 900,\n    minWidth: 1200,\n    minHeight: 800,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: path.join(__dirname, 'preload.js'),\n      sandbox: false, // Disable sandbox for development\n    },\n    titleBarStyle: 'default',\n    frame: true,\n    show: false,\n  });\n\n  win.on('ready-to-show', () => {\n    win?.show();\n  });\n\n  if (VITE_DEV_SERVER_URL) {\n    win.loadURL(VITE_DEV_SERVER_URL);\n  } else {\n    win.loadFile(path.join(RENDERER_DIST, 'index.html'));\n  }\n}\n\napp.whenReady().then(() => {\n  createWindow();\n  \n  // Initialize socket clients\n  socketClient = new SocketClient();\n  networkSocketClient = new NetworkSocketClient();\n  \n  // Register IPC handlers\n  registerIpcHandlers();\n});\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n    win = null;\n  }\n});\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\nfunction registerIpcHandlers() {\n  // CPU Socket Endpoints\n  ipcMain.handle('cpu:get-processes', async () => {\n    return await socketClient.getProcesses();\n  });\n\n  ipcMain.handle('cpu:get-processor-info', async () => {\n    return await socketClient.getProcessorInfo();\n  });\n\n  ipcMain.handle('cpu:get-whitelist', async () => {\n    return await socketClient.getWhitelist();\n  });\n\n  ipcMain.handle('cpu:optimize', async (_, name: string, level: string) => {\n    return await socketClient.optimizeProcess(name, level);\n  });\n\n  ipcMain.handle('cpu:restore', async (_, name: string) => {\n    return await socketClient.restoreProcess(name);\n  });\n\n  ipcMain.handle('cpu:restore-all', async () => {\n    return await socketClient.restoreAll();\n  });\n\n  ipcMain.handle('cpu:add-whitelist', async (_, name: string) => {\n    return await socketClient.addToWhitelist(name);\n  });\n\n  ipcMain.handle('cpu:remove-whitelist', async (_, name: string) => {\n    return await socketClient.removeFromWhitelist(name);\n  });\n\n  // TODO: Network Socket Endpoints - Register these when network socket is ready\n  // These endpoints will communicate with /tmp/network_optimizer.sock\n  \n  // ipcMain.handle('network:get-usage', async () => {\n  //   return await networkSocketClient.getNetworkUsage();\n  // });\n\n  // ipcMain.handle('network:set-speed-cap', async (_, appName: string, speedMBps: number) => {\n  //   return await networkSocketClient.setSpeedCap(appName, speedMBps);\n  // });\n\n  // ipcMain.handle('network:reset-cap', async (_, appName: string) => {\n  //   return await networkSocketClient.resetCap(appName);\n  // });\n}"],"names":["net","__dirname","fileURLToPath","BrowserWindow","app","ipcMain"],"mappings":"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"}