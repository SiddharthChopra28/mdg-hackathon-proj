"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const n=require("electron"),E=require("node:url"),c=require("node:path"),C=require("net"),_=require("fs"),P=require("os");var g=typeof document<"u"?document.currentScript:null;function O(t){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(t){for(const r in t)if(r!=="default"){const s=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,s.get?s:{enumerable:!0,get:()=>t[r]})}}return e.default=t,Object.freeze(e)}const y=O(C),T="/tmp/cpu_optimizer.sock";class k{async sendCommand(e){return new Promise((r,s)=>{const o=y.createConnection(T);o.on("connect",()=>{o.write(JSON.stringify(e))}),o.on("data",a=>{try{const i=a.toString().trim();i.startsWith("{")||i.startsWith("[")?r(JSON.parse(i)):r(i)}catch{r(a.toString().trim())}o.end()}),o.on("error",a=>{s(a)})})}async getProcesses(){try{const e=await this.sendCommand({action:"cpu_print_processes"});return Array.isArray(e)?e:[]}catch(e){return console.error("Error getting processes:",e),[]}}async getProcessorInfo(){try{return await this.sendCommand({action:"cpu_processor_info"})||{}}catch(e){return console.error("Error getting processor info:",e),{}}}async getWhitelist(){try{const e=await this.sendCommand({action:"cpu_list_whitelist"});return Array.isArray(e)?e:[]}catch(e){return console.error("Error getting whitelist:",e),[]}}async optimizeProcess(e,r){try{return await this.sendCommand({action:"cpu_optimize",name:e,level:r})==="Optimized"}catch(s){return console.error("Error optimizing process:",s),!1}}async restoreProcess(e){try{return await this.sendCommand({action:"cpu_restore",name:e})==="Restored"}catch(r){return console.error("Error restoring process:",r),!1}}async restoreAll(){try{return await this.sendCommand({action:"cpu_restore_all"})==="All Restored"}catch(e){return console.error("Error restoring all processes:",e),!1}}async addToWhitelist(e){try{return await this.sendCommand({action:"cpu_add_whitelist",name:e})==="Added to whitelist"}catch(r){return console.error("Error adding to whitelist:",r),!1}}async removeFromWhitelist(e){try{return await this.sendCommand({action:"cpu_remove_whitelist",name:e})==="Removed from whitelist"}catch(r){return console.error("Error removing from whitelist:",r),!1}}}const A="/tmp/network_optimizer.sock";class I{async sendCommand(e){return new Promise((r,s)=>{const o=y.createConnection(A);o.on("connect",()=>{o.write(JSON.stringify(e))}),o.on("data",a=>{try{const i=a.toString().trim();i.startsWith("{")||i.startsWith("[")?r(JSON.parse(i)):r(i)}catch{r(a.toString().trim())}o.end()}),o.on("error",a=>{s(a)})})}async getNetworkUsage(){try{const e=await this.sendCommand({action:"network_get_usage"});return Array.isArray(e)?e:[]}catch(e){return console.error("Error getting network usage:",e),[]}}async setSpeedCap(e,r){try{return await this.sendCommand({action:"network_set_speed_cap",app_name:e,speed_mbps:r})==="Speed cap set"}catch(s){return console.error("Error setting speed cap:",s),!1}}async resetCap(e){try{return await this.sendCommand({action:"network_reset_cap",app_name:e})==="Speed cap reset"}catch(r){return console.error("Error resetting speed cap:",r),!1}}async networkOverall(){try{return console.log("In the send command block of network overall"),await this.sendCommand({action:"network_get_overall"})}catch(e){return console.error("Error resetting speed cap:",e),!1}}}const M="/tmp/ram_optimizer.sock";class v{async sendCommand(e){return new Promise((r,s)=>{const o=y.createConnection(M);o.on("connect",()=>{o.write(JSON.stringify(e))}),o.on("data",a=>{try{const i=a.toString().trim();r(JSON.parse(i))}catch{r(a.toString().trim())}o.end()}),o.on("error",a=>{s(a)})})}async getSystemRamUsage(){return this.sendCommand({action:"ram:get-system-usage"})}async getTopRamProcesses(){return this.sendCommand({action:"ram:get-top-processes"})}}n.app.commandLine.appendSwitch("no-sandbox");const f=c.dirname(E.fileURLToPath(typeof document>"u"?require("url").pathToFileURL(__filename).href:g&&g.tagName.toUpperCase()==="SCRIPT"&&g.src||new URL("main.js",document.baseURI).href));process.env.APP_ROOT=c.join(f,"../..");const S=c.join(process.env.APP_ROOT,"dist-electron"),d=c.join(process.env.APP_ROOT,"dist"),m=process.env.VITE_DEV_SERVER_URL;process.env.VITE_PUBLIC=m?c.join(process.env.APP_ROOT,"public"):d;let p=null,l,u,w;const N=c.join(P.homedir(),"cpu-monitor.log"),h=t=>_.appendFileSync(N,`[${new Date().toISOString()}] ${t}
`);h(`APP_ROOT: ${process.env.APP_ROOT}`);h(`MAIN_DIST: ${S}`);h(`RENDERER_DIST: ${d}`);h(`index.html exists: ${_.existsSync(c.join(d,"index.html"))}`);function R(){h(`Loading: ${m||c.join(d,"index.html")}`),p=new n.BrowserWindow({width:1400,height:900,minWidth:1200,minHeight:800,webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:c.join(f,"preload.js"),sandbox:!1},titleBarStyle:"default",frame:!0,show:!1}),p.on("ready-to-show",()=>{p==null||p.show()}),m?p.loadURL(m):p.loadFile(c.join(d,"index.html"))}n.app.whenReady().then(()=>{try{R(),l=new k,u=new I,w=new v,b(),console.log("IPC handlers registered.")}catch(t){console.error("Error during app startup:",t)}});n.app.on("window-all-closed",()=>{process.platform!=="darwin"&&(n.app.quit(),p=null)});n.app.on("activate",()=>{n.BrowserWindow.getAllWindows().length===0&&R()});function b(){n.ipcMain.handle("cpu:get-processes",async()=>await l.getProcesses()),n.ipcMain.handle("cpu:get-processor-info",async()=>await l.getProcessorInfo()),n.ipcMain.handle("cpu:get-whitelist",async()=>await l.getWhitelist()),n.ipcMain.handle("cpu:optimize",async(t,e,r)=>await l.optimizeProcess(e,r)),n.ipcMain.handle("cpu:restore",async(t,e)=>await l.restoreProcess(e)),n.ipcMain.handle("cpu:restore-all",async()=>await l.restoreAll()),n.ipcMain.handle("cpu:add-whitelist",async(t,e)=>await l.addToWhitelist(e)),n.ipcMain.handle("cpu:remove-whitelist",async(t,e)=>await l.removeFromWhitelist(e)),n.ipcMain.handle("network:get-usage",async()=>await u.getNetworkUsage()),n.ipcMain.handle("network:set-speed-cap",async(t,e,r)=>await u.setSpeedCap(e,r)),n.ipcMain.handle("network:get-usage-overall",async()=>(console.log("request for network overall being sent"),await u.networkOverall())),n.ipcMain.handle("network:reset-cap",async(t,e)=>await u.resetCap(e)),n.ipcMain.handle("ram:get-system-usage",async()=>{try{return await w.getSystemRamUsage()}catch(t){return{error:"Failed to get RAM usage",details:t.message}}}),n.ipcMain.handle("ram:get-top-processes",async()=>{try{return await w.getTopRamProcesses()}catch(t){return{error:"Failed to get process list",details:t.message}}})}exports.MAIN_DIST=S;exports.RENDERER_DIST=d;exports.VITE_DEV_SERVER_URL=m;
//# sourceMappingURL=main.js.map
